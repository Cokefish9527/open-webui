---
description: 
globs: 
alwaysApply: true
---
根据官方 API 文档（https://docs.openwebui.com/getting-started/api-endpoints/），Open WebUI 的接口设计非常规范，支持 OpenAI 兼容接口、Ollama 代理、RAG 检索增强、文件/知识库管理等。为确保后续二次开发高效、规范、可维护，建议遵循以下操作手册和开发约束：

---

## Open WebUI 二次开发操作手册（建议收藏）

### 1. 统一接口规范与认证

- **所有 API 均需 Bearer Token 认证**，Token 可在 WebUI 的“设置-账号”处获取。
- 推荐统一封装 API 调用的认证逻辑，避免重复代码。

### 2. 主要 API 端点与用法

#### 2.1 获取全部模型
- `GET /api/models`
- 用于获取当前系统内注册的所有模型（Ollama、本地、OpenAI等）。

#### 2.2 聊天/补全（OpenAI 兼容）
- `POST /api/chat/completions`
- 支持多模型、多消息格式，参数与 OpenAI API 基本一致。
- 支持附加文件/知识库，实现 RAG 检索增强。

#### 2.3 Ollama 原生 API 代理
- 通过 `/ollama/<api>` 路径透明代理 Ollama 原生接口（如 `/ollama/api/generate`、`/ollama/api/embed` 等）。
- 便于直接利用 Ollama 的底层能力。

#### 2.4 文件上传与知识库管理
- 上传文件：`POST /api/v1/files/`
- 文件归集到知识库：`POST /api/v1/knowledge/{id}/file/add`
- 聊天时引用文件或知识库：在 `POST /api/chat/completions` 的 `files` 字段中指定 `type` 和 `id`。

#### 2.5 Swagger 文档
- 启动时设置 `ENV=dev`，可访问 `/docs`、`/api/v1/docs`、`/ollama/docs` 等 Swagger UI，便于接口调试和自动化测试。

---

### 3. 开发流程与约束建议

#### 3.1 需求澄清与接口设计
- **所有新需求必须先梳理 API 交互流程**，优先复用官方接口，避免重复造轮子。
- 如需扩展接口，建议先在本地 Swagger UI 进行原型验证。

#### 3.2 代码结构与复用
- 封装统一的 API 客户端（如 Python/TypeScript SDK），所有业务逻辑通过 SDK 间接调用接口，便于后期维护和升级。
- 文件上传、知识库管理、聊天补全等功能建议模块化，便于单元测试和复用。

#### 3.3 认证与安全
- 所有后端接口调用必须带 Token，前端需妥善管理 Token 生命周期。
- 不要在前端代码中硬编码 Token，避免泄露。

#### 3.4 错误处理与日志
- 所有接口调用需捕获异常，统一处理错误码和错误信息，便于前后端联调和问题定位。
- 重要操作建议记录操作日志，便于回溯。

#### 3.5 版本管理与兼容性
- 遵循官方 API 版本规范，接口变更需评估兼容性影响。
- 定期关注官方文档和 Release Notes，及时同步接口变更。

#### 3.6 测试与回归
- 每次接口变更需补充/更新自动化测试用例，确保主流程不被破坏。
- 建议使用 Postman/Swagger UI 进行接口回归测试。

#### 3.7 文档与协作
- 每个新接口/功能必须补充开发文档，说明用途、参数、返回值、异常情况。
- 团队内部定期 Code Review，确保代码风格和接口一致性。

---

### 4. 推荐开发流程（模板）

1. **需求评审**：明确业务目标，梳理涉及的 API。
2. **接口设计**：查阅官方文档，画出接口调用流程图。
3. **原型验证**：用 Swagger UI 或 Postman 验证接口可用性。
4. **SDK 封装**：如有必要，先写好统一的 API 客户端。
5. **功能开发**：严格按接口文档开发，避免“拍脑袋”。
6. **单元测试**：每个接口/功能都要有对应的测试用例。
7. **联调自测**：前后端联调，确保数据流和权限无误。
8. **文档补全**：补充接口说明、使用示例、注意事项。
9. **代码评审**：团队成员互查，发现问题及时修正。
10. **上线回归**：上线前全量回归测试，确保无遗漏。

---

### 5. 典型二次开发场景举例

- **自定义模型管理**：通过 `/api/models` 获取和管理模型，支持多后端。
- **智能问答/知识库检索**：结合文件上传、知识库归集、RAG 补全接口，实现企业级智能问答。
- **多模态扩展**：利用 Ollama 代理接口，集成图片、音频等多模态模型。
- **自动化运维/监控**：通过 API 实现模型状态监控、自动化测试等。

